/* This file was generated by SableCC (http://www.sablecc.org/). */

package drawlang.node;

import drawlang.analysis.*;

@SuppressWarnings("nls")
public final class APairwisevalueAttributevalue extends PAttributevalue
{
    private PPairwise _pairwise_;

    public APairwisevalueAttributevalue()
    {
        // Constructor
    }

    public APairwisevalueAttributevalue(
        @SuppressWarnings("hiding") PPairwise _pairwise_)
    {
        // Constructor
        setPairwise(_pairwise_);

    }

    @Override
    public Object clone()
    {
        return new APairwisevalueAttributevalue(
            cloneNode(this._pairwise_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAPairwisevalueAttributevalue(this);
    }

    public PPairwise getPairwise()
    {
        return this._pairwise_;
    }

    public void setPairwise(PPairwise node)
    {
        if(this._pairwise_ != null)
        {
            this._pairwise_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pairwise_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._pairwise_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._pairwise_ == child)
        {
            this._pairwise_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._pairwise_ == oldChild)
        {
            setPairwise((PPairwise) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
