/* This file was generated by SableCC (http://www.sablecc.org/). */

package drawlang.node;

import drawlang.analysis.*;

@SuppressWarnings("nls")
public final class ACommand extends PCommand
{
    private TIdentifier _identifier_;
    private TOpequal _opequal_;
    private PAttributevalues _attributevalues_;
    private TOpsemicolon _opsemicolon_;

    public ACommand()
    {
        // Constructor
    }

    public ACommand(
        @SuppressWarnings("hiding") TIdentifier _identifier_,
        @SuppressWarnings("hiding") TOpequal _opequal_,
        @SuppressWarnings("hiding") PAttributevalues _attributevalues_,
        @SuppressWarnings("hiding") TOpsemicolon _opsemicolon_)
    {
        // Constructor
        setIdentifier(_identifier_);

        setOpequal(_opequal_);

        setAttributevalues(_attributevalues_);

        setOpsemicolon(_opsemicolon_);

    }

    @Override
    public Object clone()
    {
        return new ACommand(
            cloneNode(this._identifier_),
            cloneNode(this._opequal_),
            cloneNode(this._attributevalues_),
            cloneNode(this._opsemicolon_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACommand(this);
    }

    public TIdentifier getIdentifier()
    {
        return this._identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(this._identifier_ != null)
        {
            this._identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifier_ = node;
    }

    public TOpequal getOpequal()
    {
        return this._opequal_;
    }

    public void setOpequal(TOpequal node)
    {
        if(this._opequal_ != null)
        {
            this._opequal_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._opequal_ = node;
    }

    public PAttributevalues getAttributevalues()
    {
        return this._attributevalues_;
    }

    public void setAttributevalues(PAttributevalues node)
    {
        if(this._attributevalues_ != null)
        {
            this._attributevalues_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._attributevalues_ = node;
    }

    public TOpsemicolon getOpsemicolon()
    {
        return this._opsemicolon_;
    }

    public void setOpsemicolon(TOpsemicolon node)
    {
        if(this._opsemicolon_ != null)
        {
            this._opsemicolon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._opsemicolon_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._identifier_)
            + toString(this._opequal_)
            + toString(this._attributevalues_)
            + toString(this._opsemicolon_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._identifier_ == child)
        {
            this._identifier_ = null;
            return;
        }

        if(this._opequal_ == child)
        {
            this._opequal_ = null;
            return;
        }

        if(this._attributevalues_ == child)
        {
            this._attributevalues_ = null;
            return;
        }

        if(this._opsemicolon_ == child)
        {
            this._opsemicolon_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        if(this._opequal_ == oldChild)
        {
            setOpequal((TOpequal) newChild);
            return;
        }

        if(this._attributevalues_ == oldChild)
        {
            setAttributevalues((PAttributevalues) newChild);
            return;
        }

        if(this._opsemicolon_ == oldChild)
        {
            setOpsemicolon((TOpsemicolon) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
