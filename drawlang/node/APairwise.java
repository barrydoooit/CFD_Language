/* This file was generated by SableCC (http://www.sablecc.org/). */

package drawlang.node;

import drawlang.analysis.*;

@SuppressWarnings("nls")
public final class APairwise extends PPairwise
{
    private TLBrk _lBrk_;
    private PPairvalue _first_;
    private TOpcomma _opcomma_;
    private PPairvalue _second_;
    private TRBrk _rBrk_;

    public APairwise()
    {
        // Constructor
    }

    public APairwise(
        @SuppressWarnings("hiding") TLBrk _lBrk_,
        @SuppressWarnings("hiding") PPairvalue _first_,
        @SuppressWarnings("hiding") TOpcomma _opcomma_,
        @SuppressWarnings("hiding") PPairvalue _second_,
        @SuppressWarnings("hiding") TRBrk _rBrk_)
    {
        // Constructor
        setLBrk(_lBrk_);

        setFirst(_first_);

        setOpcomma(_opcomma_);

        setSecond(_second_);

        setRBrk(_rBrk_);

    }

    @Override
    public Object clone()
    {
        return new APairwise(
            cloneNode(this._lBrk_),
            cloneNode(this._first_),
            cloneNode(this._opcomma_),
            cloneNode(this._second_),
            cloneNode(this._rBrk_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAPairwise(this);
    }

    public TLBrk getLBrk()
    {
        return this._lBrk_;
    }

    public void setLBrk(TLBrk node)
    {
        if(this._lBrk_ != null)
        {
            this._lBrk_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lBrk_ = node;
    }

    public PPairvalue getFirst()
    {
        return this._first_;
    }

    public void setFirst(PPairvalue node)
    {
        if(this._first_ != null)
        {
            this._first_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._first_ = node;
    }

    public TOpcomma getOpcomma()
    {
        return this._opcomma_;
    }

    public void setOpcomma(TOpcomma node)
    {
        if(this._opcomma_ != null)
        {
            this._opcomma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._opcomma_ = node;
    }

    public PPairvalue getSecond()
    {
        return this._second_;
    }

    public void setSecond(PPairvalue node)
    {
        if(this._second_ != null)
        {
            this._second_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._second_ = node;
    }

    public TRBrk getRBrk()
    {
        return this._rBrk_;
    }

    public void setRBrk(TRBrk node)
    {
        if(this._rBrk_ != null)
        {
            this._rBrk_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rBrk_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._lBrk_)
            + toString(this._first_)
            + toString(this._opcomma_)
            + toString(this._second_)
            + toString(this._rBrk_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._lBrk_ == child)
        {
            this._lBrk_ = null;
            return;
        }

        if(this._first_ == child)
        {
            this._first_ = null;
            return;
        }

        if(this._opcomma_ == child)
        {
            this._opcomma_ = null;
            return;
        }

        if(this._second_ == child)
        {
            this._second_ = null;
            return;
        }

        if(this._rBrk_ == child)
        {
            this._rBrk_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._lBrk_ == oldChild)
        {
            setLBrk((TLBrk) newChild);
            return;
        }

        if(this._first_ == oldChild)
        {
            setFirst((PPairvalue) newChild);
            return;
        }

        if(this._opcomma_ == oldChild)
        {
            setOpcomma((TOpcomma) newChild);
            return;
        }

        if(this._second_ == oldChild)
        {
            setSecond((PPairvalue) newChild);
            return;
        }

        if(this._rBrk_ == oldChild)
        {
            setRBrk((TRBrk) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
