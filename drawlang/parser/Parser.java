/* This file was generated by SableCC (http://www.sablecc.org/). */

package drawlang.parser;

import drawlang.lexer.*;
import drawlang.node.*;
import drawlang.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    switch(this.action[1])
                    {
                    case 0: /* reduce AListProgram */
		    {
			ArrayList list = new0();
			push(goTo(0), list, false);
		    }
		    break;
                    case 1: /* reduce AStmtStatementlist */
		    {
			ArrayList list = new1();
			push(goTo(1), list, false);
		    }
		    break;
                    case 2: /* reduce AStmtlistStatementlist */
		    {
			ArrayList list = new2();
			push(goTo(1), list, false);
		    }
		    break;
                    case 3: /* reduce AObjStatement */
		    {
			ArrayList list = new3();
			push(goTo(2), list, false);
		    }
		    break;
                    case 4: /* reduce ACmdStatement */
		    {
			ArrayList list = new4();
			push(goTo(2), list, false);
		    }
		    break;
                    case 5: /* reduce AObject */
		    {
			ArrayList list = new5();
			push(goTo(3), list, false);
		    }
		    break;
                    case 6: /* reduce AExplicitObjectidentifier */
		    {
			ArrayList list = new6();
			push(goTo(4), list, false);
		    }
		    break;
                    case 7: /* reduce AImplicitObjectidentifier */
		    {
			ArrayList list = new7();
			push(goTo(4), list, false);
		    }
		    break;
                    case 8: /* reduce ADisplayDisplayop */
		    {
			ArrayList list = new8();
			push(goTo(5), list, false);
		    }
		    break;
                    case 9: /* reduce AHiddenDisplayop */
		    {
			ArrayList list = new9();
			push(goTo(5), list, false);
		    }
		    break;
                    case 10: /* reduce ACommand */
		    {
			ArrayList list = new10();
			push(goTo(6), list, false);
		    }
		    break;
                    case 11: /* reduce AAttrlistContentlist */
		    {
			ArrayList list = new11();
			push(goTo(7), list, false);
		    }
		    break;
                    case 12: /* reduce AObjlistContentlist */
		    {
			ArrayList list = new12();
			push(goTo(7), list, false);
		    }
		    break;
                    case 13: /* reduce AAttrAttributelist */
		    {
			ArrayList list = new13();
			push(goTo(8), list, false);
		    }
		    break;
                    case 14: /* reduce AAttrlistAttributelist */
		    {
			ArrayList list = new14();
			push(goTo(8), list, false);
		    }
		    break;
                    case 15: /* reduce AAttribute */
		    {
			ArrayList list = new15();
			push(goTo(9), list, false);
		    }
		    break;
                    case 16: /* reduce AKeywordclassAttributename */
		    {
			ArrayList list = new16();
			push(goTo(10), list, false);
		    }
		    break;
                    case 17: /* reduce AKeywordcolorAttributename */
		    {
			ArrayList list = new17();
			push(goTo(10), list, false);
		    }
		    break;
                    case 18: /* reduce AKeywordpositionAttributename */
		    {
			ArrayList list = new18();
			push(goTo(10), list, false);
		    }
		    break;
                    case 19: /* reduce AKeywordborderAttributename */
		    {
			ArrayList list = new19();
			push(goTo(10), list, false);
		    }
		    break;
                    case 20: /* reduce AKeywordsizeAttributename */
		    {
			ArrayList list = new20();
			push(goTo(10), list, false);
		    }
		    break;
                    case 21: /* reduce AKeywordpointsAttributename */
		    {
			ArrayList list = new21();
			push(goTo(10), list, false);
		    }
		    break;
                    case 22: /* reduce AAttributevalueAttributevalues */
		    {
			ArrayList list = new22();
			push(goTo(11), list, false);
		    }
		    break;
                    case 23: /* reduce AAttributelistAttributevalues */
		    {
			ArrayList list = new23();
			push(goTo(11), list, false);
		    }
		    break;
                    case 24: /* reduce AVariablevalueAttributevalue */
		    {
			ArrayList list = new24();
			push(goTo(12), list, false);
		    }
		    break;
                    case 25: /* reduce ANumericvalueAttributevalue */
		    {
			ArrayList list = new25();
			push(goTo(12), list, false);
		    }
		    break;
                    case 26: /* reduce AHexcolorvalueAttributevalue */
		    {
			ArrayList list = new26();
			push(goTo(12), list, false);
		    }
		    break;
                    case 27: /* reduce AKeywordvalueAttributevalue */
		    {
			ArrayList list = new27();
			push(goTo(12), list, false);
		    }
		    break;
                    case 28: /* reduce APairwisevalueAttributevalue */
		    {
			ArrayList list = new28();
			push(goTo(12), list, false);
		    }
		    break;
                    case 29: /* reduce AKeywordcircleKeywordclasstype */
		    {
			ArrayList list = new29();
			push(goTo(13), list, false);
		    }
		    break;
                    case 30: /* reduce AKeywordrectKeywordclasstype */
		    {
			ArrayList list = new30();
			push(goTo(13), list, false);
		    }
		    break;
                    case 31: /* reduce AKeywordpolyKeywordclasstype */
		    {
			ArrayList list = new31();
			push(goTo(13), list, false);
		    }
		    break;
                    case 32: /* reduce APairwise */
		    {
			ArrayList list = new32();
			push(goTo(14), list, false);
		    }
		    break;
                    case 33: /* reduce AEmptyPairvalue */
		    {
			ArrayList list = new33();
			push(goTo(15), list, false);
		    }
		    break;
                    case 34: /* reduce ANumericpairvaluePairvalue */
		    {
			ArrayList list = new34();
			push(goTo(15), list, false);
		    }
		    break;
                    case 35: /* reduce AVariablepairvaluePairvalue */
		    {
			ArrayList list = new35();
			push(goTo(15), list, false);
		    }
		    break;
                    case 36: /* reduce AUnsignedNumeric */
		    {
			ArrayList list = new36();
			push(goTo(16), list, false);
		    }
		    break;
                    case 37: /* reduce ASignedNumeric */
		    {
			ArrayList list = new37();
			push(goTo(16), list, false);
		    }
		    break;
                    case 38: /* reduce AOpsignSign */
		    {
			ArrayList list = new38();
			push(goTo(17), list, false);
		    }
		    break;
                    case 39: /* reduce AMisignSign */
		    {
			ArrayList list = new39();
			push(goTo(17), list, false);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }



    @SuppressWarnings("unchecked")
    ArrayList new0() /* reduce AListProgram */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        PStatementlist pstatementlistNode2;
        pstatementlistNode2 = (PStatementlist)nodeArrayList1.get(0);

        pprogramNode1 = new AListProgram(pstatementlistNode2);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new1() /* reduce AStmtStatementlist */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatementlist pstatementlistNode1;
        {
            // Block
        PStatement pstatementNode2;
        pstatementNode2 = (PStatement)nodeArrayList1.get(0);

        pstatementlistNode1 = new AStmtStatementlist(pstatementNode2);
        }
	nodeList.add(pstatementlistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new2() /* reduce AStmtlistStatementlist */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatementlist pstatementlistNode1;
        {
            // Block
        PStatement pstatementNode2;
        PStatementlist pstatementlistNode3;
        pstatementNode2 = (PStatement)nodeArrayList1.get(0);
        pstatementlistNode3 = (PStatementlist)nodeArrayList2.get(0);

        pstatementlistNode1 = new AStmtlistStatementlist(pstatementNode2, pstatementlistNode3);
        }
	nodeList.add(pstatementlistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new3() /* reduce AObjStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PObject pobjectNode2;
        pobjectNode2 = (PObject)nodeArrayList1.get(0);

        pstatementNode1 = new AObjStatement(pobjectNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new4() /* reduce ACmdStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PCommand pcommandNode2;
        pcommandNode2 = (PCommand)nodeArrayList1.get(0);

        pstatementNode1 = new ACmdStatement(pcommandNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new5() /* reduce AObject */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PObject pobjectNode1;
        {
            // Block
        PDisplayop pdisplayopNode2;
        PObjectidentifier pobjectidentifierNode3;
        TLBrace tlbraceNode4;
        PContentlist pcontentlistNode5;
        TRBrace trbraceNode6;
        TOpsemicolon topsemicolonNode7;
        pdisplayopNode2 = (PDisplayop)nodeArrayList1.get(0);
        pobjectidentifierNode3 = (PObjectidentifier)nodeArrayList2.get(0);
        tlbraceNode4 = (TLBrace)nodeArrayList3.get(0);
        pcontentlistNode5 = (PContentlist)nodeArrayList4.get(0);
        trbraceNode6 = (TRBrace)nodeArrayList5.get(0);
        topsemicolonNode7 = (TOpsemicolon)nodeArrayList6.get(0);

        pobjectNode1 = new AObject(pdisplayopNode2, pobjectidentifierNode3, tlbraceNode4, pcontentlistNode5, trbraceNode6, topsemicolonNode7);
        }
	nodeList.add(pobjectNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new6() /* reduce AExplicitObjectidentifier */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PObjectidentifier pobjectidentifierNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pobjectidentifierNode1 = new AExplicitObjectidentifier(tidentifierNode2);
        }
	nodeList.add(pobjectidentifierNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new7() /* reduce AImplicitObjectidentifier */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PObjectidentifier pobjectidentifierNode1;
        {
            // Block
        TDollarsign tdollarsignNode2;
        tdollarsignNode2 = (TDollarsign)nodeArrayList1.get(0);

        pobjectidentifierNode1 = new AImplicitObjectidentifier(tdollarsignNode2);
        }
	nodeList.add(pobjectidentifierNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new8() /* reduce ADisplayDisplayop */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDisplayop pdisplayopNode1;
        {
            // Block
        TOpleftangle topleftangleNode2;
        topleftangleNode2 = (TOpleftangle)nodeArrayList1.get(0);

        pdisplayopNode1 = new ADisplayDisplayop(topleftangleNode2);
        }
	nodeList.add(pdisplayopNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new9() /* reduce AHiddenDisplayop */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDisplayop pdisplayopNode1;
        {
            // Block
        TOpdot topdotNode2;
        topdotNode2 = (TOpdot)nodeArrayList1.get(0);

        pdisplayopNode1 = new AHiddenDisplayop(topdotNode2);
        }
	nodeList.add(pdisplayopNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new10() /* reduce ACommand */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCommand pcommandNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TOpequal topequalNode3;
        PAttributevalues pattributevaluesNode4;
        TOpsemicolon topsemicolonNode5;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        topequalNode3 = (TOpequal)nodeArrayList2.get(0);
        pattributevaluesNode4 = (PAttributevalues)nodeArrayList3.get(0);
        topsemicolonNode5 = (TOpsemicolon)nodeArrayList4.get(0);

        pcommandNode1 = new ACommand(tidentifierNode2, topequalNode3, pattributevaluesNode4, topsemicolonNode5);
        }
	nodeList.add(pcommandNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new11() /* reduce AAttrlistContentlist */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PContentlist pcontentlistNode1;
        {
            // Block
        PAttributelist pattributelistNode2;
        pattributelistNode2 = (PAttributelist)nodeArrayList1.get(0);

        pcontentlistNode1 = new AAttrlistContentlist(pattributelistNode2);
        }
	nodeList.add(pcontentlistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new12() /* reduce AObjlistContentlist */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PContentlist pcontentlistNode1;
        {
            // Block
        PStatementlist pstatementlistNode2;
        pstatementlistNode2 = (PStatementlist)nodeArrayList1.get(0);

        pcontentlistNode1 = new AObjlistContentlist(pstatementlistNode2);
        }
	nodeList.add(pcontentlistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new13() /* reduce AAttrAttributelist */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAttributelist pattributelistNode1;
        {
            // Block
        PAttribute pattributeNode2;
        pattributeNode2 = (PAttribute)nodeArrayList1.get(0);

        pattributelistNode1 = new AAttrAttributelist(pattributeNode2);
        }
	nodeList.add(pattributelistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new14() /* reduce AAttrlistAttributelist */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAttributelist pattributelistNode1;
        {
            // Block
        PAttribute pattributeNode2;
        PAttributelist pattributelistNode3;
        pattributeNode2 = (PAttribute)nodeArrayList1.get(0);
        pattributelistNode3 = (PAttributelist)nodeArrayList2.get(0);

        pattributelistNode1 = new AAttrlistAttributelist(pattributeNode2, pattributelistNode3);
        }
	nodeList.add(pattributelistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new15() /* reduce AAttribute */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAttribute pattributeNode1;
        {
            // Block
        PAttributename pattributenameNode2;
        TOpcolon topcolonNode3;
        PAttributevalues pattributevaluesNode4;
        TOpsemicolon topsemicolonNode5;
        pattributenameNode2 = (PAttributename)nodeArrayList1.get(0);
        topcolonNode3 = (TOpcolon)nodeArrayList2.get(0);
        pattributevaluesNode4 = (PAttributevalues)nodeArrayList3.get(0);
        topsemicolonNode5 = (TOpsemicolon)nodeArrayList4.get(0);

        pattributeNode1 = new AAttribute(pattributenameNode2, topcolonNode3, pattributevaluesNode4, topsemicolonNode5);
        }
	nodeList.add(pattributeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new16() /* reduce AKeywordclassAttributename */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAttributename pattributenameNode1;
        {
            // Block
        TKeywordclass tkeywordclassNode2;
        tkeywordclassNode2 = (TKeywordclass)nodeArrayList1.get(0);

        pattributenameNode1 = new AKeywordclassAttributename(tkeywordclassNode2);
        }
	nodeList.add(pattributenameNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new17() /* reduce AKeywordcolorAttributename */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAttributename pattributenameNode1;
        {
            // Block
        TKeywordcolor tkeywordcolorNode2;
        tkeywordcolorNode2 = (TKeywordcolor)nodeArrayList1.get(0);

        pattributenameNode1 = new AKeywordcolorAttributename(tkeywordcolorNode2);
        }
	nodeList.add(pattributenameNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new18() /* reduce AKeywordpositionAttributename */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAttributename pattributenameNode1;
        {
            // Block
        TKeywordposition tkeywordpositionNode2;
        tkeywordpositionNode2 = (TKeywordposition)nodeArrayList1.get(0);

        pattributenameNode1 = new AKeywordpositionAttributename(tkeywordpositionNode2);
        }
	nodeList.add(pattributenameNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new19() /* reduce AKeywordborderAttributename */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAttributename pattributenameNode1;
        {
            // Block
        TKeywordborder tkeywordborderNode2;
        tkeywordborderNode2 = (TKeywordborder)nodeArrayList1.get(0);

        pattributenameNode1 = new AKeywordborderAttributename(tkeywordborderNode2);
        }
	nodeList.add(pattributenameNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new20() /* reduce AKeywordsizeAttributename */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAttributename pattributenameNode1;
        {
            // Block
        TKeywordsize tkeywordsizeNode2;
        tkeywordsizeNode2 = (TKeywordsize)nodeArrayList1.get(0);

        pattributenameNode1 = new AKeywordsizeAttributename(tkeywordsizeNode2);
        }
	nodeList.add(pattributenameNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new21() /* reduce AKeywordpointsAttributename */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAttributename pattributenameNode1;
        {
            // Block
        TKeywordpoints tkeywordpointsNode2;
        tkeywordpointsNode2 = (TKeywordpoints)nodeArrayList1.get(0);

        pattributenameNode1 = new AKeywordpointsAttributename(tkeywordpointsNode2);
        }
	nodeList.add(pattributenameNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new22() /* reduce AAttributevalueAttributevalues */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAttributevalues pattributevaluesNode1;
        {
            // Block
        PAttributevalue pattributevalueNode2;
        pattributevalueNode2 = (PAttributevalue)nodeArrayList1.get(0);

        pattributevaluesNode1 = new AAttributevalueAttributevalues(pattributevalueNode2);
        }
	nodeList.add(pattributevaluesNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new23() /* reduce AAttributelistAttributevalues */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAttributevalues pattributevaluesNode1;
        {
            // Block
        PAttributevalues pattributevaluesNode2;
        TOpcomma topcommaNode3;
        PAttributevalue pattributevalueNode4;
        pattributevaluesNode2 = (PAttributevalues)nodeArrayList1.get(0);
        topcommaNode3 = (TOpcomma)nodeArrayList2.get(0);
        pattributevalueNode4 = (PAttributevalue)nodeArrayList3.get(0);

        pattributevaluesNode1 = new AAttributelistAttributevalues(pattributevaluesNode2, topcommaNode3, pattributevalueNode4);
        }
	nodeList.add(pattributevaluesNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new24() /* reduce AVariablevalueAttributevalue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAttributevalue pattributevalueNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pattributevalueNode1 = new AVariablevalueAttributevalue(tidentifierNode2);
        }
	nodeList.add(pattributevalueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new25() /* reduce ANumericvalueAttributevalue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAttributevalue pattributevalueNode1;
        {
            // Block
        PNumeric pnumericNode2;
        pnumericNode2 = (PNumeric)nodeArrayList1.get(0);

        pattributevalueNode1 = new ANumericvalueAttributevalue(pnumericNode2);
        }
	nodeList.add(pattributevalueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new26() /* reduce AHexcolorvalueAttributevalue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAttributevalue pattributevalueNode1;
        {
            // Block
        THexcolor thexcolorNode2;
        thexcolorNode2 = (THexcolor)nodeArrayList1.get(0);

        pattributevalueNode1 = new AHexcolorvalueAttributevalue(thexcolorNode2);
        }
	nodeList.add(pattributevalueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new27() /* reduce AKeywordvalueAttributevalue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAttributevalue pattributevalueNode1;
        {
            // Block
        PKeywordclasstype pkeywordclasstypeNode2;
        pkeywordclasstypeNode2 = (PKeywordclasstype)nodeArrayList1.get(0);

        pattributevalueNode1 = new AKeywordvalueAttributevalue(pkeywordclasstypeNode2);
        }
	nodeList.add(pattributevalueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new28() /* reduce APairwisevalueAttributevalue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAttributevalue pattributevalueNode1;
        {
            // Block
        PPairwise ppairwiseNode2;
        ppairwiseNode2 = (PPairwise)nodeArrayList1.get(0);

        pattributevalueNode1 = new APairwisevalueAttributevalue(ppairwiseNode2);
        }
	nodeList.add(pattributevalueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new29() /* reduce AKeywordcircleKeywordclasstype */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PKeywordclasstype pkeywordclasstypeNode1;
        {
            // Block
        TKeywordcircle tkeywordcircleNode2;
        tkeywordcircleNode2 = (TKeywordcircle)nodeArrayList1.get(0);

        pkeywordclasstypeNode1 = new AKeywordcircleKeywordclasstype(tkeywordcircleNode2);
        }
	nodeList.add(pkeywordclasstypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new30() /* reduce AKeywordrectKeywordclasstype */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PKeywordclasstype pkeywordclasstypeNode1;
        {
            // Block
        TKeywordrect tkeywordrectNode2;
        tkeywordrectNode2 = (TKeywordrect)nodeArrayList1.get(0);

        pkeywordclasstypeNode1 = new AKeywordrectKeywordclasstype(tkeywordrectNode2);
        }
	nodeList.add(pkeywordclasstypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new31() /* reduce AKeywordpolyKeywordclasstype */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PKeywordclasstype pkeywordclasstypeNode1;
        {
            // Block
        TKeywordpoly tkeywordpolyNode2;
        tkeywordpolyNode2 = (TKeywordpoly)nodeArrayList1.get(0);

        pkeywordclasstypeNode1 = new AKeywordpolyKeywordclasstype(tkeywordpolyNode2);
        }
	nodeList.add(pkeywordclasstypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new32() /* reduce APairwise */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPairwise ppairwiseNode1;
        {
            // Block
        TLBrk tlbrkNode2;
        PPairvalue ppairvalueNode3;
        TOpcomma topcommaNode4;
        PPairvalue ppairvalueNode5;
        TRBrk trbrkNode6;
        tlbrkNode2 = (TLBrk)nodeArrayList1.get(0);
        ppairvalueNode3 = (PPairvalue)nodeArrayList2.get(0);
        topcommaNode4 = (TOpcomma)nodeArrayList3.get(0);
        ppairvalueNode5 = (PPairvalue)nodeArrayList4.get(0);
        trbrkNode6 = (TRBrk)nodeArrayList5.get(0);

        ppairwiseNode1 = new APairwise(tlbrkNode2, ppairvalueNode3, topcommaNode4, ppairvalueNode5, trbrkNode6);
        }
	nodeList.add(ppairwiseNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new33() /* reduce AEmptyPairvalue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        PPairvalue ppairvalueNode1;
        {
            // Block

        ppairvalueNode1 = new AEmptyPairvalue();
        }
	nodeList.add(ppairvalueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new34() /* reduce ANumericpairvaluePairvalue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPairvalue ppairvalueNode1;
        {
            // Block
        PNumeric pnumericNode2;
        pnumericNode2 = (PNumeric)nodeArrayList1.get(0);

        ppairvalueNode1 = new ANumericpairvaluePairvalue(pnumericNode2);
        }
	nodeList.add(ppairvalueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new35() /* reduce AVariablepairvaluePairvalue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPairvalue ppairvalueNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        ppairvalueNode1 = new AVariablepairvaluePairvalue(tidentifierNode2);
        }
	nodeList.add(ppairvalueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new36() /* reduce AUnsignedNumeric */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PNumeric pnumericNode1;
        {
            // Block
        TNumber tnumberNode2;
        tnumberNode2 = (TNumber)nodeArrayList1.get(0);

        pnumericNode1 = new AUnsignedNumeric(tnumberNode2);
        }
	nodeList.add(pnumericNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new37() /* reduce ASignedNumeric */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PNumeric pnumericNode1;
        {
            // Block
        PSign psignNode2;
        TNumber tnumberNode3;
        psignNode2 = (PSign)nodeArrayList1.get(0);
        tnumberNode3 = (TNumber)nodeArrayList2.get(0);

        pnumericNode1 = new ASignedNumeric(psignNode2, tnumberNode3);
        }
	nodeList.add(pnumericNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new38() /* reduce AOpsignSign */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSign psignNode1;
        {
            // Block
        TOpplus topplusNode2;
        topplusNode2 = (TOpplus)nodeArrayList1.get(0);

        psignNode1 = new AOpsignSign(topplusNode2);
        }
	nodeList.add(psignNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new39() /* reduce AMisignSign */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSign psignNode1;
        {
            // Block
        TOpminus topminusNode2;
        topminusNode2 = (TOpminus)nodeArrayList1.get(0);

        psignNode1 = new AMisignSign(topminusNode2);
        }
	nodeList.add(psignNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {11, SHIFT, 1}, {23, SHIFT, 2}, {24, SHIFT, 3}, },
			{{-1, ERROR, 1}, {20, SHIFT, 10}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 4}, {25, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 1}, {11, SHIFT, 1}, {23, SHIFT, 2}, {24, SHIFT, 3}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 8}, {11, SHIFT, 12}, {12, SHIFT, 13}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 10}, {6, SHIFT, 15}, {7, SHIFT, 16}, {8, SHIFT, 17}, {9, SHIFT, 18}, {10, SHIFT, 19}, {11, SHIFT, 20}, {15, SHIFT, 21}, {21, SHIFT, 22}, {22, SHIFT, 23}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 7}, },
			{{-1, ERROR, 14}, {13, SHIFT, 30}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 33}, {7, SHIFT, 16}, {11, SHIFT, 31}, {21, SHIFT, 22}, {22, SHIFT, 23}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 39}, },
			{{-1, ERROR, 24}, {17, SHIFT, 34}, {19, SHIFT, 35}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 29}, {7, SHIFT, 36}, },
			{{-1, ERROR, 30}, {0, SHIFT, 37}, {1, SHIFT, 38}, {2, SHIFT, 39}, {3, SHIFT, 40}, {4, SHIFT, 41}, {5, SHIFT, 42}, {11, SHIFT, 1}, {23, SHIFT, 2}, {24, SHIFT, 3}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 32}, {19, SHIFT, 48}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 35}, {6, SHIFT, 15}, {7, SHIFT, 16}, {8, SHIFT, 17}, {9, SHIFT, 18}, {10, SHIFT, 19}, {11, SHIFT, 20}, {15, SHIFT, 21}, {21, SHIFT, 22}, {22, SHIFT, 23}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 44}, {14, SHIFT, 50}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 13}, {0, SHIFT, 37}, {1, SHIFT, 38}, {2, SHIFT, 39}, {3, SHIFT, 40}, {4, SHIFT, 41}, {5, SHIFT, 42}, },
			{{-1, ERROR, 47}, {18, SHIFT, 52}, },
			{{-1, REDUCE, 33}, {7, SHIFT, 16}, {11, SHIFT, 31}, {21, SHIFT, 22}, {22, SHIFT, 23}, },
			{{-1, REDUCE, 23}, },
			{{-1, ERROR, 50}, {17, SHIFT, 54}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 52}, {6, SHIFT, 15}, {7, SHIFT, 16}, {8, SHIFT, 17}, {9, SHIFT, 18}, {10, SHIFT, 19}, {11, SHIFT, 20}, {15, SHIFT, 21}, {21, SHIFT, 22}, {22, SHIFT, 23}, },
			{{-1, ERROR, 53}, {16, SHIFT, 56}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 55}, {17, SHIFT, 57}, {19, SHIFT, 35}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 15}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 4}, },
			{{-1, 5}, {6, 11}, {30, 43}, },
			{{-1, 6}, },
			{{-1, 7}, },
			{{-1, 14}, },
			{{-1, 8}, },
			{{-1, 9}, },
			{{-1, 44}, },
			{{-1, 45}, {46, 51}, },
			{{-1, 46}, },
			{{-1, 47}, },
			{{-1, 24}, {52, 55}, },
			{{-1, 25}, {35, 49}, },
			{{-1, 26}, },
			{{-1, 27}, },
			{{-1, 32}, {48, 53}, },
			{{-1, 28}, {21, 33}, {48, 33}, },
			{{-1, 29}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: identifier, '.', '>'",
			"expecting: '='",
			"expecting: identifier, '$'",
			"expecting: EOF",
			"expecting: identifier, '}', '.', '>', EOF",
			"expecting: hexcolor, number, 'Circle', 'Rectangle', 'Polygon', identifier, '(', '+', '-'",
			"expecting: '}', EOF",
			"expecting: '{'",
			"expecting: ';', ','",
			"expecting: ')', ';', ','",
			"expecting: number, identifier, ',', '+', '-'",
			"expecting: number",
			"expecting: 'class', 'color', 'position', 'border', 'size', 'points', identifier, '.', '>'",
			"expecting: ')', ','",
			"expecting: ','",
			"expecting: ':'",
			"expecting: '}'",
			"expecting: 'class', 'color', 'position', 'border', 'size', 'points', '}'",
			"expecting: number, identifier, ')', '+', '-'",
			"expecting: ';'",
			"expecting: ')'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 2, 3, 3, 4, 4, 2, 4, 5, 6, 7, 7, 7, 8, 9, 8, 8, 8, 8, 10, 11, 11, 8, 8, 8, 8, 8, 11, 12, 13, 14, 13, 4, 5, 9, 15, 15, 15, 15, 15, 15, 16, 16, 16, 17, 15, 18, 8, 19, 16, 5, 20, 4, 8, 8, 17, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
