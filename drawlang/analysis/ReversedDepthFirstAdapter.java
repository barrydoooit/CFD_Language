/* This file was generated by SableCC (http://www.sablecc.org/). */

package drawlang.analysis;

import java.util.*;
import drawlang.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPProgram().apply(this);
        outStart(node);
    }

    public void inAListProgram(AListProgram node)
    {
        defaultIn(node);
    }

    public void outAListProgram(AListProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListProgram(AListProgram node)
    {
        inAListProgram(node);
        if(node.getStatementlist() != null)
        {
            node.getStatementlist().apply(this);
        }
        outAListProgram(node);
    }

    public void inAStmtStatementlist(AStmtStatementlist node)
    {
        defaultIn(node);
    }

    public void outAStmtStatementlist(AStmtStatementlist node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStmtStatementlist(AStmtStatementlist node)
    {
        inAStmtStatementlist(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAStmtStatementlist(node);
    }

    public void inAStmtlistStatementlist(AStmtlistStatementlist node)
    {
        defaultIn(node);
    }

    public void outAStmtlistStatementlist(AStmtlistStatementlist node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStmtlistStatementlist(AStmtlistStatementlist node)
    {
        inAStmtlistStatementlist(node);
        if(node.getStatementlist() != null)
        {
            node.getStatementlist().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAStmtlistStatementlist(node);
    }

    public void inAObjStatement(AObjStatement node)
    {
        defaultIn(node);
    }

    public void outAObjStatement(AObjStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAObjStatement(AObjStatement node)
    {
        inAObjStatement(node);
        if(node.getObject() != null)
        {
            node.getObject().apply(this);
        }
        outAObjStatement(node);
    }

    public void inACmdStatement(ACmdStatement node)
    {
        defaultIn(node);
    }

    public void outACmdStatement(ACmdStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACmdStatement(ACmdStatement node)
    {
        inACmdStatement(node);
        if(node.getCommand() != null)
        {
            node.getCommand().apply(this);
        }
        outACmdStatement(node);
    }

    public void inAObject(AObject node)
    {
        defaultIn(node);
    }

    public void outAObject(AObject node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAObject(AObject node)
    {
        inAObject(node);
        if(node.getOpsemicolon() != null)
        {
            node.getOpsemicolon().apply(this);
        }
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        if(node.getContentlist() != null)
        {
            node.getContentlist().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getObjectidentifier() != null)
        {
            node.getObjectidentifier().apply(this);
        }
        if(node.getDisplayop() != null)
        {
            node.getDisplayop().apply(this);
        }
        outAObject(node);
    }

    public void inAExplicitObjectidentifier(AExplicitObjectidentifier node)
    {
        defaultIn(node);
    }

    public void outAExplicitObjectidentifier(AExplicitObjectidentifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExplicitObjectidentifier(AExplicitObjectidentifier node)
    {
        inAExplicitObjectidentifier(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAExplicitObjectidentifier(node);
    }

    public void inAImplicitObjectidentifier(AImplicitObjectidentifier node)
    {
        defaultIn(node);
    }

    public void outAImplicitObjectidentifier(AImplicitObjectidentifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAImplicitObjectidentifier(AImplicitObjectidentifier node)
    {
        inAImplicitObjectidentifier(node);
        if(node.getDollarsign() != null)
        {
            node.getDollarsign().apply(this);
        }
        outAImplicitObjectidentifier(node);
    }

    public void inADisplayDisplayop(ADisplayDisplayop node)
    {
        defaultIn(node);
    }

    public void outADisplayDisplayop(ADisplayDisplayop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADisplayDisplayop(ADisplayDisplayop node)
    {
        inADisplayDisplayop(node);
        if(node.getOpleftangle() != null)
        {
            node.getOpleftangle().apply(this);
        }
        outADisplayDisplayop(node);
    }

    public void inAHiddenDisplayop(AHiddenDisplayop node)
    {
        defaultIn(node);
    }

    public void outAHiddenDisplayop(AHiddenDisplayop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAHiddenDisplayop(AHiddenDisplayop node)
    {
        inAHiddenDisplayop(node);
        if(node.getOpdot() != null)
        {
            node.getOpdot().apply(this);
        }
        outAHiddenDisplayop(node);
    }

    public void inACommand(ACommand node)
    {
        defaultIn(node);
    }

    public void outACommand(ACommand node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACommand(ACommand node)
    {
        inACommand(node);
        if(node.getOpsemicolon() != null)
        {
            node.getOpsemicolon().apply(this);
        }
        if(node.getAttributevalues() != null)
        {
            node.getAttributevalues().apply(this);
        }
        if(node.getOpequal() != null)
        {
            node.getOpequal().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outACommand(node);
    }

    public void inAAttrlistContentlist(AAttrlistContentlist node)
    {
        defaultIn(node);
    }

    public void outAAttrlistContentlist(AAttrlistContentlist node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAttrlistContentlist(AAttrlistContentlist node)
    {
        inAAttrlistContentlist(node);
        if(node.getAttributelist() != null)
        {
            node.getAttributelist().apply(this);
        }
        outAAttrlistContentlist(node);
    }

    public void inAObjlistContentlist(AObjlistContentlist node)
    {
        defaultIn(node);
    }

    public void outAObjlistContentlist(AObjlistContentlist node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAObjlistContentlist(AObjlistContentlist node)
    {
        inAObjlistContentlist(node);
        if(node.getStatementlist() != null)
        {
            node.getStatementlist().apply(this);
        }
        outAObjlistContentlist(node);
    }

    public void inAAttrAttributelist(AAttrAttributelist node)
    {
        defaultIn(node);
    }

    public void outAAttrAttributelist(AAttrAttributelist node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAttrAttributelist(AAttrAttributelist node)
    {
        inAAttrAttributelist(node);
        if(node.getAttribute() != null)
        {
            node.getAttribute().apply(this);
        }
        outAAttrAttributelist(node);
    }

    public void inAAttrlistAttributelist(AAttrlistAttributelist node)
    {
        defaultIn(node);
    }

    public void outAAttrlistAttributelist(AAttrlistAttributelist node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAttrlistAttributelist(AAttrlistAttributelist node)
    {
        inAAttrlistAttributelist(node);
        if(node.getAttributelist() != null)
        {
            node.getAttributelist().apply(this);
        }
        if(node.getAttribute() != null)
        {
            node.getAttribute().apply(this);
        }
        outAAttrlistAttributelist(node);
    }

    public void inAAttribute(AAttribute node)
    {
        defaultIn(node);
    }

    public void outAAttribute(AAttribute node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAttribute(AAttribute node)
    {
        inAAttribute(node);
        if(node.getOpsemicolon() != null)
        {
            node.getOpsemicolon().apply(this);
        }
        if(node.getAttributevalues() != null)
        {
            node.getAttributevalues().apply(this);
        }
        if(node.getOpcolon() != null)
        {
            node.getOpcolon().apply(this);
        }
        if(node.getAttributename() != null)
        {
            node.getAttributename().apply(this);
        }
        outAAttribute(node);
    }

    public void inAKeywordclassAttributename(AKeywordclassAttributename node)
    {
        defaultIn(node);
    }

    public void outAKeywordclassAttributename(AKeywordclassAttributename node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAKeywordclassAttributename(AKeywordclassAttributename node)
    {
        inAKeywordclassAttributename(node);
        if(node.getKeywordclass() != null)
        {
            node.getKeywordclass().apply(this);
        }
        outAKeywordclassAttributename(node);
    }

    public void inAKeywordcolorAttributename(AKeywordcolorAttributename node)
    {
        defaultIn(node);
    }

    public void outAKeywordcolorAttributename(AKeywordcolorAttributename node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAKeywordcolorAttributename(AKeywordcolorAttributename node)
    {
        inAKeywordcolorAttributename(node);
        if(node.getKeywordcolor() != null)
        {
            node.getKeywordcolor().apply(this);
        }
        outAKeywordcolorAttributename(node);
    }

    public void inAKeywordpositionAttributename(AKeywordpositionAttributename node)
    {
        defaultIn(node);
    }

    public void outAKeywordpositionAttributename(AKeywordpositionAttributename node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAKeywordpositionAttributename(AKeywordpositionAttributename node)
    {
        inAKeywordpositionAttributename(node);
        if(node.getKeywordposition() != null)
        {
            node.getKeywordposition().apply(this);
        }
        outAKeywordpositionAttributename(node);
    }

    public void inAKeywordborderAttributename(AKeywordborderAttributename node)
    {
        defaultIn(node);
    }

    public void outAKeywordborderAttributename(AKeywordborderAttributename node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAKeywordborderAttributename(AKeywordborderAttributename node)
    {
        inAKeywordborderAttributename(node);
        if(node.getKeywordborder() != null)
        {
            node.getKeywordborder().apply(this);
        }
        outAKeywordborderAttributename(node);
    }

    public void inAKeywordsizeAttributename(AKeywordsizeAttributename node)
    {
        defaultIn(node);
    }

    public void outAKeywordsizeAttributename(AKeywordsizeAttributename node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAKeywordsizeAttributename(AKeywordsizeAttributename node)
    {
        inAKeywordsizeAttributename(node);
        if(node.getKeywordsize() != null)
        {
            node.getKeywordsize().apply(this);
        }
        outAKeywordsizeAttributename(node);
    }

    public void inAKeywordpointsAttributename(AKeywordpointsAttributename node)
    {
        defaultIn(node);
    }

    public void outAKeywordpointsAttributename(AKeywordpointsAttributename node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAKeywordpointsAttributename(AKeywordpointsAttributename node)
    {
        inAKeywordpointsAttributename(node);
        if(node.getKeywordpoints() != null)
        {
            node.getKeywordpoints().apply(this);
        }
        outAKeywordpointsAttributename(node);
    }

    public void inAAttributevalueAttributevalues(AAttributevalueAttributevalues node)
    {
        defaultIn(node);
    }

    public void outAAttributevalueAttributevalues(AAttributevalueAttributevalues node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAttributevalueAttributevalues(AAttributevalueAttributevalues node)
    {
        inAAttributevalueAttributevalues(node);
        if(node.getAttributevalue() != null)
        {
            node.getAttributevalue().apply(this);
        }
        outAAttributevalueAttributevalues(node);
    }

    public void inAAttributelistAttributevalues(AAttributelistAttributevalues node)
    {
        defaultIn(node);
    }

    public void outAAttributelistAttributevalues(AAttributelistAttributevalues node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAttributelistAttributevalues(AAttributelistAttributevalues node)
    {
        inAAttributelistAttributevalues(node);
        if(node.getAttributevalue() != null)
        {
            node.getAttributevalue().apply(this);
        }
        if(node.getOpcomma() != null)
        {
            node.getOpcomma().apply(this);
        }
        if(node.getAttributevalues() != null)
        {
            node.getAttributevalues().apply(this);
        }
        outAAttributelistAttributevalues(node);
    }

    public void inAVariablevalueAttributevalue(AVariablevalueAttributevalue node)
    {
        defaultIn(node);
    }

    public void outAVariablevalueAttributevalue(AVariablevalueAttributevalue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariablevalueAttributevalue(AVariablevalueAttributevalue node)
    {
        inAVariablevalueAttributevalue(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAVariablevalueAttributevalue(node);
    }

    public void inANumericvalueAttributevalue(ANumericvalueAttributevalue node)
    {
        defaultIn(node);
    }

    public void outANumericvalueAttributevalue(ANumericvalueAttributevalue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumericvalueAttributevalue(ANumericvalueAttributevalue node)
    {
        inANumericvalueAttributevalue(node);
        if(node.getNumeric() != null)
        {
            node.getNumeric().apply(this);
        }
        outANumericvalueAttributevalue(node);
    }

    public void inAHexcolorvalueAttributevalue(AHexcolorvalueAttributevalue node)
    {
        defaultIn(node);
    }

    public void outAHexcolorvalueAttributevalue(AHexcolorvalueAttributevalue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAHexcolorvalueAttributevalue(AHexcolorvalueAttributevalue node)
    {
        inAHexcolorvalueAttributevalue(node);
        if(node.getHexcolor() != null)
        {
            node.getHexcolor().apply(this);
        }
        outAHexcolorvalueAttributevalue(node);
    }

    public void inAKeywordvalueAttributevalue(AKeywordvalueAttributevalue node)
    {
        defaultIn(node);
    }

    public void outAKeywordvalueAttributevalue(AKeywordvalueAttributevalue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAKeywordvalueAttributevalue(AKeywordvalueAttributevalue node)
    {
        inAKeywordvalueAttributevalue(node);
        if(node.getKeywordclasstype() != null)
        {
            node.getKeywordclasstype().apply(this);
        }
        outAKeywordvalueAttributevalue(node);
    }

    public void inAPairwisevalueAttributevalue(APairwisevalueAttributevalue node)
    {
        defaultIn(node);
    }

    public void outAPairwisevalueAttributevalue(APairwisevalueAttributevalue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPairwisevalueAttributevalue(APairwisevalueAttributevalue node)
    {
        inAPairwisevalueAttributevalue(node);
        if(node.getPairwise() != null)
        {
            node.getPairwise().apply(this);
        }
        outAPairwisevalueAttributevalue(node);
    }

    public void inAKeywordcircleKeywordclasstype(AKeywordcircleKeywordclasstype node)
    {
        defaultIn(node);
    }

    public void outAKeywordcircleKeywordclasstype(AKeywordcircleKeywordclasstype node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAKeywordcircleKeywordclasstype(AKeywordcircleKeywordclasstype node)
    {
        inAKeywordcircleKeywordclasstype(node);
        if(node.getKeywordcircle() != null)
        {
            node.getKeywordcircle().apply(this);
        }
        outAKeywordcircleKeywordclasstype(node);
    }

    public void inAKeywordrectKeywordclasstype(AKeywordrectKeywordclasstype node)
    {
        defaultIn(node);
    }

    public void outAKeywordrectKeywordclasstype(AKeywordrectKeywordclasstype node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAKeywordrectKeywordclasstype(AKeywordrectKeywordclasstype node)
    {
        inAKeywordrectKeywordclasstype(node);
        if(node.getKeywordrect() != null)
        {
            node.getKeywordrect().apply(this);
        }
        outAKeywordrectKeywordclasstype(node);
    }

    public void inAKeywordpolyKeywordclasstype(AKeywordpolyKeywordclasstype node)
    {
        defaultIn(node);
    }

    public void outAKeywordpolyKeywordclasstype(AKeywordpolyKeywordclasstype node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAKeywordpolyKeywordclasstype(AKeywordpolyKeywordclasstype node)
    {
        inAKeywordpolyKeywordclasstype(node);
        if(node.getKeywordpoly() != null)
        {
            node.getKeywordpoly().apply(this);
        }
        outAKeywordpolyKeywordclasstype(node);
    }

    public void inAPairwise(APairwise node)
    {
        defaultIn(node);
    }

    public void outAPairwise(APairwise node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPairwise(APairwise node)
    {
        inAPairwise(node);
        if(node.getRBrk() != null)
        {
            node.getRBrk().apply(this);
        }
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        if(node.getOpcomma() != null)
        {
            node.getOpcomma().apply(this);
        }
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        if(node.getLBrk() != null)
        {
            node.getLBrk().apply(this);
        }
        outAPairwise(node);
    }

    public void inAEmptyPairvalue(AEmptyPairvalue node)
    {
        defaultIn(node);
    }

    public void outAEmptyPairvalue(AEmptyPairvalue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyPairvalue(AEmptyPairvalue node)
    {
        inAEmptyPairvalue(node);
        outAEmptyPairvalue(node);
    }

    public void inANumericpairvaluePairvalue(ANumericpairvaluePairvalue node)
    {
        defaultIn(node);
    }

    public void outANumericpairvaluePairvalue(ANumericpairvaluePairvalue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumericpairvaluePairvalue(ANumericpairvaluePairvalue node)
    {
        inANumericpairvaluePairvalue(node);
        if(node.getNumeric() != null)
        {
            node.getNumeric().apply(this);
        }
        outANumericpairvaluePairvalue(node);
    }

    public void inAVariablepairvaluePairvalue(AVariablepairvaluePairvalue node)
    {
        defaultIn(node);
    }

    public void outAVariablepairvaluePairvalue(AVariablepairvaluePairvalue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariablepairvaluePairvalue(AVariablepairvaluePairvalue node)
    {
        inAVariablepairvaluePairvalue(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAVariablepairvaluePairvalue(node);
    }

    public void inAUnsignedNumeric(AUnsignedNumeric node)
    {
        defaultIn(node);
    }

    public void outAUnsignedNumeric(AUnsignedNumeric node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnsignedNumeric(AUnsignedNumeric node)
    {
        inAUnsignedNumeric(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outAUnsignedNumeric(node);
    }

    public void inASignedNumeric(ASignedNumeric node)
    {
        defaultIn(node);
    }

    public void outASignedNumeric(ASignedNumeric node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASignedNumeric(ASignedNumeric node)
    {
        inASignedNumeric(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        if(node.getSign() != null)
        {
            node.getSign().apply(this);
        }
        outASignedNumeric(node);
    }

    public void inAOpsignSign(AOpsignSign node)
    {
        defaultIn(node);
    }

    public void outAOpsignSign(AOpsignSign node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpsignSign(AOpsignSign node)
    {
        inAOpsignSign(node);
        if(node.getOpplus() != null)
        {
            node.getOpplus().apply(this);
        }
        outAOpsignSign(node);
    }

    public void inAMisignSign(AMisignSign node)
    {
        defaultIn(node);
    }

    public void outAMisignSign(AMisignSign node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMisignSign(AMisignSign node)
    {
        inAMisignSign(node);
        if(node.getOpminus() != null)
        {
            node.getOpminus().apply(this);
        }
        outAMisignSign(node);
    }
}
